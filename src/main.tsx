import React from 'react'
import ReactDOM from 'react-dom/client'
import { StrictMode } from 'react'

import App from './App'
import './styles/globals.css'

/**
 * Entry point da aplica√ß√£o R.M. Est√©tica PRO+ v2.0
 * 
 * Configura√ß√µes:
 * - React 18 com Concurrent Features
 * - StrictMode para desenvolvimento
 * - Importa√ß√£o de estilos globais
 * - Inicializa√ß√£o do React DOM
 */

// Verificar se o elemento root existe
const rootElement = document.getElementById('root')
if (!rootElement) {
  throw new Error('Elemento root n√£o encontrado! Verifique o arquivo index.html.')
}

// Criar root do React 18
const root = ReactDOM.createRoot(rootElement)

// Renderizar aplica√ß√£o
root.render(
  <StrictMode>
    <App />
  </StrictMode>
)

// Hot module replacement para desenvolvimento
if (import.meta.hot) {
  import.meta.hot.accept()
}

// Service Worker para cache (opcional - desabilitado por padr√£o)
if ('serviceWorker' in navigator && import.meta.env.PROD) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js')
      .then((registration) => {
        console.log('SW registered: ', registration)
      })
      .catch((registrationError) => {
        console.log('SW registration failed: ', registrationError)
      })
  })
}

// Configura√ß√£o global para desenvolvimento
if (import.meta.env.DEV) {
  console.log('üöÄ R.M. Est√©tica PRO+ v2.0 iniciado em modo de desenvolvimento')
  console.log('üì¶ Vers√£o:', import.meta.env.VITE_APP_VERSION || '2.0.0')
  console.log('üåê Supabase URL:', import.meta.env.VITE_SUPABASE_URL || 'N√£o configurado')
  
  // Disponibilizar store global para debugging
  if (typeof window !== 'undefined') {
    window.__APP_VERSION__ = import.meta.env.VITE_APP_VERSION || '2.0.0'
    window.__DEV_MODE__ = true
  }
}

// Tratamento de erros n√£o capturados
window.addEventListener('error', (event) => {
  console.error('Erro n√£o capturado:', event.error)
  
  // Em produ√ß√£o, enviar erro para servi√ßo de monitoramento
  if (import.meta.env.PROD) {
    // Implementar integra√ß√£o com Sentry ou similar
    console.error('Erro em produ√ß√£o:', {
      message: event.error?.message,
      stack: event.error?.stack,
      filename: event.filename,
      lineno: event.lineno,
      colno: event.colno,
    })
  }
})

// Tratamento de promises rejeitadas
window.addEventListener('unhandledrejection', (event) => {
  console.error('Promise rejeitada n√£o tratada:', event.reason)
  
  // Em produ√ß√£o, enviar erro para servi√ßo de monitoramento
  if (import.meta.env.PROD) {
    console.error('Promise rejeitada em produ√ß√£o:', {
      reason: event.reason,
      promise: event.promise,
    })
  }
})

// Configura√ß√£o de performance (opcional)
if (import.meta.env.DEV) {
  // Medir performance de renderiza√ß√£o
  const observer = new PerformanceObserver((list) => {
    for (const entry of list.getEntries()) {
      if (entry.entryType === 'measure') {
        console.log(`‚ö° Performance: ${entry.name} - ${entry.duration}ms`)
      }
    }
  })
  
  observer.observe({ entryTypes: ['measure'] })
}

// Configura√ß√£o de acessibilidade
if (import.meta.env.DEV) {
  // Avisar sobre problemas de acessibilidade em desenvolvimento
  import('react-dom/client').then(() => {
    console.log('‚ôø Modo de desenvolvimento: Verifica√ß√µes de acessibilidade ativadas')
  })
}